## Docker

- Um container é um padrao de unidade de software que empacota código e todas as dependências de uma aplicação fazendo que a mesma seja executada rápidamente e de forma confiável

- Os containers são processos que são isolados com processos filhos
	1- Namespaces => Isola os processos
	2- Cgroups => Controla os recursos do container, evita que o container extrapole o uso de recursos
	3- OFS (Overlay File System) => Trabalhando com camadas, não precisa de copias inteiras do SO, as dependências são reutilizadas, por isso o container é leve
	
	Obs.1: Os containers são imutáveis
	Obs.2: É criada uma camada no container de leitura/escrita
	Obs.3: As imagens ficam armazenadas em um image registry

	* Arquitetura
	Docker Client(Containers, Run, Pull, Push...) 	->	Docker Host (Volumes, Network, Cache Image, Daemon API)	<- Registry (Images)


## Comandos Docker

1- docker ps (containers executando)
2- docker ps -a (todos os containers ativos e desligados)
3- docker run hello-world (baixa uma imagem, criar o container e executa o entrypoint / command)
Obs.: alguns containers so executam o processo e terminam, não ficam rodando, vai depender do que o entrypoint/command fazem
4- docker run -it ubuntu:latest bash (-it o "i" permite bloquear o terminal e "t" tty permite digitar, o bash é o comando que é executado ao executar o container)
5- docker start wonderful_engelbart (inicia um container)
6- docker run -it --rm ubuntu:latest bash ( --rm remove o container depois que ele é finalizado )
7- docker run -p 81:80 nginx (definindo bind entra a porta do host 81 para a porta 80 do container)
8- docker run -d -p 81:80 nginx (-d usado para desatachar o terminal, ou seja liberar)
9- docker stop <container> (finaliza o container)
10- docker rm <container> (remove os containers)
11- docker rm appserver -f (-f forca a remoção do container mesmo em uso)
12- docker run -d --name appserver nginx (--name define o nome do container, quando nao informa é gerado um nome aleatório)
13- docker exec -it appserver bash (exec permite executar um comando no container, nesse caso executamos o bash de forma iterativa com o -it)
14- docker run -d --name appserver -p 81:80 -v "/Users/jamesson/work/Curso FullCycle/Docker/html/":/usr/share/nginx/html nginx (-v permite criar um bind mount de compartilhamento entre o host e o container para persistir os arquivos necessários, ele espelha exatamente o diretório do host)
15- docker run -d --name appserver -p 81:80 --mount type=bind,source="$(pwd)",target=/usr/share/nginx/html nginx (-v é mais antigo, o --mount tem o mesmo efeito, porem
ele deixa explicito o type, source and target. o -v também cria o diretório caso ele não exista, ja não --mount ele informa erro que a pasta não existe)
16- docker volume ls (lista os volumes)
17- docker volume create meuvolume (cria um volume)
18- docker volume inspect meuvolume (inspeciona o detalhe do volume)
19- docker run --name appserver -d --mount type=volume,source=meuvolume,target=/app nginx (faz o compatilhamento de um volume com um diretório do container, tudo que for persistido dentro de /app armazenado no volume que pode ser compartilhado entre containers)
20- docker volume prune (remove todos os volumes não usados)
21- docker pull <image> (apenas baixa a imagem e não cria um container)
22- docker images (verificas as imagens baixadas)
23- docker rmi ubuntu (remove uma imagem)
24- docker build -t jamessonjr/nginx-com-vim:latest . (constrói uma imagem nova baseado no Dockerfile que se encontra no mesmo diretório, -t é para definir o nome da imagem)
25- docker run jamessonjr/nginx-com-vim echo oi (passando os parametros depois sobrescreve o comando do dockerfile)

